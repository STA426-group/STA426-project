paper_links <- entrez_link(dbfrom="pubmed", id=26008703, cmd="llinks")
paper_links
?entrez_link
paper_links <- entrez_link(dbfrom="pubmed", id=26008703, cmd="llinks", by_id = T)
linkout_urls(paper_links)
entrez_search(db = "sra", term = "transgenerational epigenetic inheritance")
paper_links <- entrez_link(dbfrom="pubmed", id=26008703, db = "sra")
paper_links
paper_links$links
paper_links <- entrez_link(dbfrom="pubmed", id=26008703, db = "geo")
paper_links <- entrez_link(dbfrom="pubmed", id=26008703, db = "gds")
paper_links
paper_links$links
paper_links$links$pubmed_gds
linkout_urls(paper_links)
paper_links
paper_links$links$pubmed_gds
entrez_search(db="sra", term="transgenerational epigenetic inheritance")
a <- entrez_search(db="sra", term="transgenerational epigenetic inheritance")
a$ids
a <- entrez_search(db="sra", term="transgenerational epigenetic inheritance", retmax = 4000)
a$
a$ids
a$ids
a$count
a$retmax
a$QueryTranslation
a$file
a$ids
a <- entrez_search(db="gds", term="transgenerational epigenetic inheritance", retmax = 4000)
a$ids
a$retmax
a$ids
a$
a$QueryTranslation
a$QueryTranslation
a$QueryTranslation
library(GEOquery)
BiocManager::valid()
BiocManager::install(c(
"BiocParallel", "bumphunter", "CEMiTool", "DistributionUtils", "effects", "generics", "Gviz", "pracma", "PythonInR",
"QuasR", "RcppArmadillo", "scrime", "VariantAnnotation"
), update = TRUE, ask = FALSE)
setwd("~/mnt/IM/DKT/courses/sta426-project-dmr-comparison/methylKit")
library(methylKit)
files <- list.files("./input", pattern = "meth", full.names = T)
files
read.files <- lapply(files, function(x) read.table(x, header = T, sep = "\t",
stringsAsFactors = F))
head(read.files[[1]])
read.files <- lapply(files, function(x) read.table(x, header = F, sep = "\t",
stringsAsFactors = F))
head(read.files[[1]])
14/17
5/6
library("dmrseq")
setwd("~/mnt/IM/DKT/courses/sta426-project-dmr-comparison")
library("dmrseq")
M <- read.csv("data/data_neg_control.M", header=TRUE, sep="\t")
setwd("~/mnt/IM/DKT/courses/sta426-project-dmr-comparison")
library("dmrseq")
M <- read.csv("data/data_neg_control.M", header=TRUE, sep="\t")
M <- read.table("data/data_neg_control.M.gz", header=TRUE, sep="\t")
View(M)
cov <- read.table("data/data_neg_control.cov.gz", header=TRUE, sep="\t",
stringsAsFactors = F)
M <- read.table("data/data_neg_control.M.gz", header=TRUE, sep="\t",
stringsAsFactors = F)
cov <- read.table("data/data_neg_control.cov.gz", header=TRUE, sep="\t",
stringsAsFactors = F)
chr <- M$chr
pos <- M$pos
M$chr <- NULL
M$pos <- NULL
cov$chr <- NULL
cov$pos <- NULL
M <- data.matrix(M)
cov <- data.matrix(cov)
View(M)
colnames(M)
sampleNames <- gsub(".M", "", colnames(M))
sampleNames
colnames(M) <- sampleNames
colnames(cov) <- sampleNames
bs <- BSseq(chr=chr, pos=pos, M=M, Cov = cov, sampleNames=sampleNames)
bs
# reorder samples to create a null comparison
bs.null <- bs[,c(1,3,5,2,4,6)]
# add 100 DMRs
bs.sim <- simDMRs(bs=bs.null, num.dmrs=100)
pos.sim <- start(bs.sim$bs)
chr.sim <- rep("chr18", n=length(pos.sim))
cov.sim <- cbind(chr.sim, pos.sim, getCoverage(bs.sim$bs, type="Cov"))
M.sim <- cbind(chr.sim, pos.sim, getCoverage(bs.sim$bs, type="M"))
ranges.start <- start(bs.sim$gr.dmrs)
ranges.end <- end(bs.sim$gr.dmrs)
mncov <- bs.sim$dmr.mncov
effect.sizes <- bs.sim$delta
sim.metadata <- data.frame(start=ranges.start, end=ranges.end, mean.cov=mncov, effect.size=effect.sizes)
sim.metadata
head(cov.sim)
head(M.sim)
head(cov)
head(M)
ncol(cov)
i <- 1
tmp.data <- data.frame(chr = chr, start = pos, end = pos,
meth = NA, me = M[,i], un = cov[,i] - M[,i])
head(tmp.data)
tmp.data$meth <- (tmp.data$me/tmp.data$me + tmp.data$un) * 100
head(tmp.data)
14/17
tmp.data$meth <- (tmp.data$me/(tmp.data$me + tmp.data$un)) * 100
14/17
head(tmp.data)
colnames(M)
paste0("./data/data_neg_control_", colnames(cov)[i], ".bismark.cov.gz")
for(i in 1:ncol(cov)){
tmp.data <- data.frame(chr = chr, start = pos, end = pos,
meth = NA, me = M[,i], un = cov[,i] - M[,i])
tmp.data$meth <- (tmp.data$me/(tmp.data$me + tmp.data$un)) * 100
n.data <- paste0("./data/data_neg_control_", colnames(cov)[i], ".bismark.cov.gz")
write.table(tmp.data, gzfile(n.data, compression = 3), sep = "\t", quote = F, row.names = F, col.names = F)
}
colnames(cov.sim)
n.sim <- paste0("./data/data_sim_", colnames(cov)[i], ".bismark.cov.gz")
for(i in 1:ncol(cov)){
# negative control
tmp.data <- data.frame(chr = chr, start = pos, end = pos,
meth = NA, me = M[,i], un = cov[,i] - M[,i])
tmp.data$meth <- (tmp.data$me/(tmp.data$me + tmp.data$un)) * 100
n.data <- paste0("./data/data_neg_control_", colnames(cov)[i], ".bismark.cov.gz")
write.table(tmp.data, gzfile(n.data, compression = 3), sep = "\t", quote = F, row.names = F, col.names = F)
# simulated data
tmp.sim <- data.frame(chr = chr.sim, start = pos.sim, end = pos.sim,
meth = NA, me = M.sim[,i], un = cov.sim[,i] - M.sim[,i])
tmp.sim$meth <- (tmp.sim$me/(tmp.sim$me + tmp.sim$un)) * 100
n.sim <- paste0("./data/data_sim_", colnames(cov)[i], ".bismark.cov.gz")
write.table(tmp.sim, gzfile(n.sim, compression = 3), sep = "\t", quote = F, row.names = F, col.names = F)
}
i
# simulated data
tmp.sim <- data.frame(chr = chr.sim, start = pos.sim, end = pos.sim,
meth = NA, me = M.sim[,i], un = cov.sim[,i] - M.sim[,i])
head(chr.sim)
head(pos.sim)
head(M.sim[,i])
head(M.sim)
# simulated data
tmp.sim <- data.frame(chr = chr.sim, start = pos.sim, end = pos.sim,
meth = NA, me = M.sim[,i+2], un = cov.sim[,i+2] - M.sim[,i+2])
i+2
i+2
head(cov.sim)
M.sim[,i+2]
# simulated data
tmp.sim <- data.frame(chr = chr.sim, start = pos.sim, end = pos.sim,
meth = NA, me = as.numeric(M.sim[,i+2]),
un = as.numeric(cov.sim[,i+2]) - as.numeric(M.sim[,i+2]))
head(tmp.sim)
tmp.sim$meth <- (tmp.sim$me/(tmp.sim$me + tmp.sim$un)) * 100
head(tmp.sim)
14/3
14/17
n.sim <- paste0("./data/data_sim_", colnames(cov)[i], ".bismark.cov.gz")
n.sim
for(i in 1:ncol(cov)){
# negative control
tmp.data <- data.frame(chr = chr, start = pos, end = pos,
meth = NA, me = M[,i], un = cov[,i] - M[,i])
tmp.data$meth <- (tmp.data$me/(tmp.data$me + tmp.data$un)) * 100
n.data <- paste0("./data/data_neg_control_", colnames(cov)[i], ".bismark.cov.gz")
write.table(tmp.data, gzfile(n.data, compression = 3), sep = "\t", quote = F, row.names = F, col.names = F)
# simulated data
tmp.sim <- data.frame(chr = chr.sim, start = pos.sim, end = pos.sim,
meth = NA, me = as.numeric(M.sim[,i+2]),
un = as.numeric(cov.sim[,i+2]) - as.numeric(M.sim[,i+2]))
tmp.sim$meth <- (tmp.sim$me/(tmp.sim$me + tmp.sim$un)) * 100
n.sim <- paste0("./data/data_sim_", colnames(cov)[i], ".bismark.cov.gz")
write.table(tmp.sim, gzfile(n.sim, compression = 3), sep = "\t", quote = F, row.names = F, col.names = F)
}
files <- list.files("./input", pattern = "neg", full.names = T)
files.list <- as.list(files)
library(methylKit)
files <- list.files("./data", pattern = "neg", full.names = T)
files.list <- as.list(files)
as.character(sapply(basename(files), function(x) strsplit(x, "\\.|_")[[1]][4]))
files <- list.files("./input/", pattern = "neg", full.names = T)
as.character(sapply(basename(files), function(x) strsplit(x, "\\.|_")[[1]][4]))
as.character(sapply(basename(files), function(x) strsplit(x, "\\.|_")[[1]][3]))
files
setwd("~/mnt/IM/DKT/courses/sta426-project-dmr-comparison/methylKit")
files <- list.files("./input", pattern = "neg", full.names = T)
files.list <- as.list(files)
as.character(sapply(basename(files), function(x) strsplit(x, "\\.|_")[[1]][3]))
as.character(sapply(basename(files), function(x) strsplit(x, "\\.|_")[[1]][4]))
as.character(sapply(basename(files), function(x) strsplit(x, "\\.")[[1]][1]))
names(files.list) <- as.character(sapply(basename(files), function(x) strsplit(x, "\\.")[[1]][1]))
myobj <- methRead(
location = files.list, sample.id = as.list(names(files.list)),
assembly = "mm10", pipeline = "bismarkCoverage", header = F, skip = 0,
dbtype = "tabix", treatment = c(0,1,0,1,0,1), dbdir = "./output/methylDB"
)
myobj@.Data
myobj@.Data[[1]]
myobj <- methRead(
location = files.list, sample.id = as.list(names(files.list)),
assembly = "hg19", pipeline = "bismarkCoverage", header = F, skip = 0,
dbtype = "tabix", treatment = c(0,1,0,1,0,1), dbdir = "./output/methylDB"
)
myobj@.Data[[1]]
par(mfrow = c(4, 3), cex = 0.4, cex.axis = 1.3, cex.lab = 1.3, cex.main = 1.2)
tmp <- sapply(1:length(files.list), function(x)
getMethylationStats(myobj[[x]], plot = TRUE, both.strands = FALSE))
par(mfrow = c(3, 2), cex = 0.4, cex.axis = 1.3, cex.lab = 1.3, cex.main = 1.2)
tmp <- sapply(1:length(files.list), function(x)
getMethylationStats(myobj[[x]], plot = TRUE, both.strands = FALSE))
par(mfrow = c(4, 3), cex = 0.4, cex.axis = 1.1, cex.lab = 1.1, cex.main = 1.2)
tmp <- sapply(1:length(files.list), function(x)
getCoverageStats(myobj[[x]], plot = TRUE, both.strands = FALSE))
par(mfrow = c(3, 2), cex = 0.4, cex.axis = 1.1, cex.lab = 1.1, cex.main = 1.2)
tmp <- sapply(1:length(files.list), function(x)
getCoverageStats(myobj[[x]], plot = TRUE, both.strands = FALSE))
meth <- unite(myobj)
head(meth)
meth
getCorrelation(meth, plot = TRUE)
clusterSamples(meth, dist = "correlation", method = "ward", plot = TRUE)
hc <- clusterSamples(meth, dist = "correlation", method = "ward", plot = FALSE)
PCASamples(meth, screeplot = TRUE)
PCASamples(meth)
myDiff <- calculateDiffMeth(meth, mc.cores = detectCores() - 1)
# get hyper methylated bases
myDiff25p.hyper <- getMethylDiff(myDiff,
difference = 25, qvalue = 0.01,
type = "hyper"
)
myDiff25p.hyper
myDiff25p.hypo <- getMethylDiff(myDiff,
difference = 25, qvalue = 0.01,
type = "hypo"
)
myDiff25p <- getMethylDiff(myDiff, difference = 25, qvalue = 0.01)
diffMethPerChr(myDiff, plot = T, qvalue.cutoff = 0.01, meth.cutoff = 25)
# https://www.biostars.org/p/156637/
gene.obj <- readTranscriptFeatures("./input/hg19.refGene.txt.gz")
library(genomation)
BiocManager::install("genomation")
# https://www.biostars.org/p/156637/
gene.obj <- readTranscriptFeatures("./input/hg19.refGene.txt.gz")
library(genomation)
# https://www.biostars.org/p/156637/
gene.obj <- readTranscriptFeatures("./input/hg19.refGene.txt.gz")
gene.obj <- readTranscriptFeatures("./input/hg19.refGene.txt.gz")
gene.obj=readTranscriptFeatures(system.file("extdata", "refseq.hg18.bed.txt",
package = "methylKit"))
gene.obj
gene.obj=readTranscriptFeatures(system.file("extdata", "refseq.hg19.bed.txt",
package = "methylKit"))
par(mfrow = c(3, 2), cex = 0.4, cex.axis = 1.3, cex.lab = 1.3, cex.main = 1.2)
tmp <- sapply(1:length(files.list), function(x)
getMethylationStats(myobj[[x]], plot = TRUE, both.strands = FALSE))
par(mfrow = c(3, 2), cex = 0.4, cex.axis = 1.1, cex.lab = 1.1, cex.main = 1.2)
tmp <- sapply(1:length(files.list), function(x)
getCoverageStats(myobj[[x]], plot = TRUE, both.strands = FALSE))
meth <- unite(myobj)
myDiff
assay(myDiff)
colData(myDiff)
myDiff@dbpath
myDiff@num.records
myDiff@sample.ids
myDiff@assembly
myDiff@treatment
myDiff@resolution
myDiff
data.frame(myDiff)
myDiff@dbpath
data("hg19_genes_bed")
# https://www.biostars.org/p/156637/
gene.obj <- readTranscriptFeatures("./input/hg19.refGene.txt.gz")
diffAnn <- annotateWithGeneParts(as(myDiff25p, "GRanges"), gene.obj)
head(getAssociationWithTSS(diffAnn))
cpg.obj=readFeatureFlank(system.file("extdata", "cpgi.hg18.bed.txt",
package = "methylKit"),
feature.flank.name=c("CpGi","shores"))
cpg.obj
cpg.obj@elementMetadata
cpg.obj@metadata
cpg.obj@listData
cpg.obj=readFeatureFlank("./input/cpgi.hg19.txt.gz", feature.flank.name=c("CpGi","shores"))
?readFeatureFlank
cpg.obj=readFeatureFlank("./input/cpgi.hg19.txt", feature.flank.name=c("CpGi","shores"), )
cpg.obj=readFeatureFlank("./input/cpgi.hg19.txt")
plotTargetAnnotation(diffAnn,precedence=TRUE,
main="differential methylation annotation")
plotTargetAnnotation(diffCpGann,col=c("green","gray","white"),
main="differential methylation annotation")
as(myDiff,"GRanges")
mydiff.GR <- as(myDiff,"GRanges")
mydiff.GR.df <- data.frame(mydiff.GR)
View(mydiff.GR.df)
files.neg <- list.files("./input", pattern = "neg", full.names = T)
files.neg <- list.files("./input", pattern = "neg", full.names = T)
files.list.neg <- as.list(files.neg)
names(files.list.neg) <- as.character(sapply(basename(files.neg), function(x) strsplit(x, "\\.")[[1]][1]))
myobj.neg <- methRead(
location = files.list, sample.id = as.list(names(files.list)),
assembly = "hg19", pipeline = "bismarkCoverage", header = F, skip = 0,
dbtype = "tabix", treatment = c(0,1,0,1,0,1), dbdir = "./output/methylDB"
)
myobj.neg <- methRead(
location = files.list.neg, sample.id = as.list(names(files.list.neg)),
assembly = "hg19", pipeline = "bismarkCoverage", header = F, skip = 0,
dbtype = "tabix", treatment = c(0,1,0,1,0,1), dbdir = "./output/methylDB"
)
par(mfrow = c(3, 2), cex = 0.6, cex.axis = 1.3, cex.lab = 1.3, cex.main = 1.2)
tmp <- sapply(1:length(files.list.neg), function(x)
getMethylationStats(myobj.neg[[x]], plot = TRUE, both.strands = FALSE))
meth.neg <- unite(myobj.neg)
getCorrelation(meth.neg, plot = TRUE)
clusterSamples(meth.neg, dist = "correlation", method = "ward", plot = TRUE)
myDiff.neg.GR.df <- data.frame(myDiff.neg.GR)
myDiff.neg <- calculateDiffMeth(meth.neg, mc.cores = detectCores() - 1)
myDiff.neg.GR <- as(myDiff.neg,"GRanges")
myDiff.neg.GR.df <- data.frame(myDiff.neg.GR)
View(myDiff.neg.GR.df)
head(myDiff.neg.GR.df)
write.table(myDiff.neg.GR.df, file = gzfile("methylKit_negative_control.txt.gz", compression = 3),
sep = "\t", row.names = F, quote = F)
View(myDiff.neg.GR.df)
?calculateDiffMeth
myDiff25p=getMethylDiff(myDiff.neg,difference=25,qvalue=0.01)
myDiff25p
View(myDiff.neg.GR.df)
myDiff.neg <- calculateDiffMeth(meth.neg, mc.cores = detectCores() - 1, overdispersion = "MN")
myDiff.neg.GR <- as(myDiff.neg,"GRanges")
myDiff.neg.GR.df <- data.frame(myDiff.neg.GR)
View(myDiff.neg.GR.df)
library(methylKit)
file.list=list( system.file("extdata", "test1.myCpG.txt", package = "methylKit"),
system.file("extdata", "test2.myCpG.txt", package = "methylKit"),
system.file("extdata", "control1.myCpG.txt", package = "methylKit"),
system.file("extdata", "control2.myCpG.txt", package = "methylKit") )
# read the files to a methylRawListDB object: myobjDB
# and save in databases in folder methylDB
myobjDB=methRead(file.list,
sample.id=list("test1","test2","ctrl1","ctrl2"),
assembly="hg18",
treatment=c(1,1,0,0),
context="CpG",
dbtype = "tabix",
dbdir = "methylDB"
)
meth=unite(myobj, destrand=FALSE)
filtered.myobj=filterByCoverage(myobj,lo.count=10,lo.perc=NULL,
hi.count=NULL,hi.perc=99.9)
filtered.myobj=filterByCoverage(myobjDB,lo.count=10,lo.perc=NULL,
hi.count=NULL,hi.perc=99.9)
meth=unite(filtered.myobj, destrand=FALSE)
tiles=tileMethylCounts(filtered.myobj,win.size=1000,step.size=1000)
head(tiles[[1]],3)
myDiff=calculateDiffMeth(meth)
myDiff
myDiff <- as(myDiff,"GRanges")
View(data.frame(myDiff))
tiles
filtered.myobj
myDiff=calculateDiffMeth(tiles)
tiles=tileMethylCounts(myobj.neg,win.size=1000,step.size=1000)
meth.neg.r <- unite(tiles)
meth.neg.r
myDiff.neg.r <- calculateDiffMeth(meth.neg.r, mc.cores = detectCores() - 1, overdispersion = "MN")
myDiff.neg.GR.r <- as(myDiff.neg.r,"GRanges")
myDiff.neg.GR.df.r <- data.frame(myDiff.neg.GR.r)
write.table(myDiff.neg.GR.df.r, file = gzfile("methylKit_negative_control_regions.txt.gz",
compression = 3),
sep = "\t", row.names = F, quote = F)
View(myDiff.neg.GR.df.r)
files.sim <- list.files("./input", pattern = "sim", full.names = T)
files.list.sim <- as.list(files.sim)
names(files.list.sim) <- as.character(sapply(basename(files.sim), function(x) strsplit(x, "\\.")[[1]][1]))
myobj.sim <- methRead(
location = files.list.sim, sample.id = as.list(names(files.list.sim)),
assembly = "hg19", pipeline = "bismarkCoverage", header = F, skip = 0,
dbtype = "tabix", treatment = c(0,1,0,1,0,1), dbdir = "./output/methylDB"
)
myobj.sim <- methRead(
location = files.list.sim, sample.id = as.list(names(files.list.sim)),
assembly = "hg19", pipeline = "bismarkCoverage", header = F, skip = 0,
dbtype = "tabix", treatment = c(0,0,0,1,1,1), dbdir = "./output/methylDB"
)
myobj.sim
par(mfrow = c(3, 2), cex = 0.6, cex.axis = 1.3, cex.lab = 1.3, cex.main = 1.2)
tmp <- sapply(1:length(files.list.sim), function(x)
getMethylationStats(myobj.sim[[x]], plot = TRUE, both.strands = FALSE))
par(mfrow = c(3, 2), cex = 0.6, cex.axis = 1.3, cex.lab = 1.3, cex.main = 1.2)
tmp <- sapply(1:length(files.list.sim), function(x)
getCoverageStats(myobj.sim[[x]], plot = TRUE, both.strands = FALSE))
meth.sim <- unite(myobj.sim)
getCorrelation(meth.sim, plot = TRUE)
clusterSamples(meth.sim, dist = "correlation", method = "ward", plot = TRUE)
hc <- clusterSamples(meth.sim, dist = "correlation", method = "ward", plot = FALSE)
PCASamples(meth.sim, screeplot = TRUE)
PCASamples(meth.sim)
myDiff.sim <- calculateDiffMeth(meth.sim, mc.cores = detectCores() - 1, overdispersion = "MN")
myDiff.sim.GR <- as(myDiff.sim,"GRanges")
myDiff.sim.GR.df <- data.frame(myDiff.sim.GR)
View(myDiff.sim.GR.df)
devtools::install_github("Displayr/rhtmlDonut")
values1 <- c(42.41, 9.78, 7.37, 5.24, 3.71, 3.6, 2.78, 2.29, 1.4, 1.39,
1.34, 1.03, 1.02, 0.94, 0.94, 0.88, 0.82, 0.71, 0.59, 0.54, 0.51,
0.43, 0.39, 0.37, 0.36, 0.34, 0.32, 0.31, 0.26, 0.26)
labels1 <- c("Chrome 48.0", "IE 11.0", "Firefox 44.0", "Safari iPad", "Chrome for Android",
"Firefox 43.0", "Safari 9.0", "Chrome 47.0", "Edge 13", "Android 0",
"IE 8.0", "IE 9.0", "IE 10.0", "Opera 35.0", "Other", "Chrome 45.0",
"Chrome 46.0", "Chrome 43.0", "Chrome 31.0", "Safari 8.0", "Chrome 44.0",
"Edge 12", "Firefox 38.0", "Chrome iPad", "Firefox 42.0", "Firefox 45.0",
"Firefox 31.0", "Opera 34.0", "Chrome 41.0", "Opera 12.1")
rhtmlDonut::Donut(footer="IE Sucks",
footer.font.size=8,
title="Browser Usage",
title.font.size=32,
subtitle="Circa ~ 2013",
subtitle.font.size=24,
values = values1,
labels = labels1,
labels.font.size = 16,
values.order = "descending",
prefix = "", suffix = "%")
devtools::install_github("Displayr/rhtmlHeatmap")
library(rhtmlHeatmap)
Heatmap(mtcars, scale="column", colors="Blues")
library(devtools)
install_github('Displayr/rhtmlPictographs')
rhtmlPictographs::graphic('circle:lightblue')
install_github('Displayr/rhtmlEchoLifecycle')
rhtmlEchoLifecycle::draw(width, height, 'abcd')
rhtmlEchoLifecycle::draw(4, 4, 'abcd')
rhtmlEchoLifecycle::draw(10, 4, 'abcd')
install_github('Displayr/htmlwidgets')
library(rhtmlPalmTrees)
PalmTrees(data = matrix(seq(25), 5),
col.heading.font.size = 20,
col.font.size = 25)
rhtmlMetro::Box(text = your.html, text.as.html = TRUE)
install_github('Displayr/rhtmlMetro')
my.data = matrix(1:9, nrow = 3, dimnames = list(c("This is a long column heading; too long to show neatly in any of of the visualization packages that I know and love", "This is a second column heading; too long to show neatly in any of of the visualization packages that I know and love.", "This is a third  column heading; too long to show neatly in any of of the visualization packages that I know and love."),
c("This was a long row heading; too long to show neatly in any of of the visualization packages that I know and love", "This is another long column heading, which is too long to show neatly in any of of the visualization packages that I know and love", "This is a third long column heading, which is too long to show neatly in any of of the visualization packages that I know and love")))
MyHeatmap <- function(x)
{
# Lookups for coloring cells and fonts
require(RColorBrewer)
cell.colors = colorRampPalette(brewer.pal(9,"Blues"))(101)
font.colors = c(rep("blue", 60), rep("white", 41))
# Scaling the data to be on [1, 2, ..., 101], for the lookups
min.x <- min(x)
max.x <- max(x)
scaled.x = round((x - min(x)) / (max(x) - min(x)) * 100, 0) + 1
# Writing the cells styles
n.rows = nrow(x)
n.columns = ncol(x)
rows = rep(1:n.rows, rep(n.columns, n.rows))
columns = rep(1:n.columns, n.rows)
x.lookups = as.numeric(t(scaled.x))
cells.styles = paste0('td.cell', rows, columns, ' {background-color: ', cell.colors[x.lookups], '; color: ', font.colors[x.lookups] ,';}')
cell.styles = paste0(cells.styles, collapse = "\n")
# Creating the table
columns.headers = paste0('<th>', c("", dimnames(x)[[2]]) ,'</th>')
tble = paste0(columns.headers, collapse = "\n")
row.headers = paste0('<th>', c(dimnames(x)[[1]]) ,'</th>')
print('row.headers')
print(row.headers)
for (row in 1:n.rows)
{
row.cells = paste0('<td class = "border cell', row, 1:n.columns, '">', x[row,],'</td>')
print('row.cells')
print(row.cells)
tble = paste0(tble, '<tr>', row.headers[row], paste(row.cells, collapse = '\n'), '</tr>')
}
# Assembling the HTML
html = paste0('<!DOCTYPE html>
<html>
<head>
<style>
table, th, td {border-collapse: collapse; }
th, td {padding: 5px; text-align: center; font-family: arial; font-size: 8pt}
td.border {border: 1px solid grey; }',' td.cell11 {background-color: #F7FBFF; color: blue;}',
cell.styles, '
</style>
</head>
<body>
<table style="width:100%">', tble, '
</table>
</body>
</html>')
rhtmlMetro::Box(text = html, text.as.html = TRUE)
}
MyHeatmap(my.data)
MyHeatmap(matrix(1:200,
nrow = 20,
dimname = list(LETTERS[1:20],
letters[1:10])))
BiocManager::install('DMRcaller')
library(DMRcaller)
#load presaved data
data(methylationDataList)
library(DMRcaller)
#load presaved data
data(methylationDataList)
View(methylationDataList)
methylationDataList
